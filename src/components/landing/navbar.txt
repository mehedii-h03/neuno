 <nav className="flex items-center justify-between max-w-7xl mx-auto mt-10 px-4">
      {/* Logo */}
      <div className="w-[200px]">
        <h1 className="text-2xl font-semibold text-[#9C87FE]">Logo</h1>
      </div>

      {/* Navigation menu with corner-to-corner sparkle */}
      <div className="h-14 w-[622px] relative flex items-center justify-center">
        {/* Glass background */}
        <div className="absolute inset-0 bg-[#2E2A405C] backdrop-blur-md rounded-xl" />

        {/* Border */}
        <div className="absolute inset-0 rounded-xl border border-[#48407080] opacity-40" />

        {/* Corner-to-Corner Sparkle */}
        {isLoaded && (
          <div className="absolute inset-0 pointer-events-none overflow-hidden rounded-xl">
            <svg
              width="100%"
              height="100%"
              viewBox="0 0 622 56"
              preserveAspectRatio="none"
            >
              <defs>
                <linearGradient id="sparkGradient" x1="0" y1="0" x2="1" y2="0">
                  <stop offset="0%" stopColor="rgba(156, 135, 254, 0)" />
                  <stop offset="40%" stopColor="#9C87FE" />
                  <stop offset="60%" stopColor="#9C87FE" />
                  <stop offset="100%" stopColor="rgba(156, 135, 254, 0)" />
                </linearGradient>
              </defs>

              {/* Top right to bottom right corner sparkle with extension */}
              <path
                d="M 610 0 L 622 0 L 622 56 L 590 56"
                stroke="url(#sparkGradient)"
                strokeWidth="2"
                strokeLinecap="round"
                fill="none"
                opacity="0"
                pathLength="1"
                strokeDasharray="0.15 0.85"
              >
                <animate
                  attributeName="opacity"
                  values="0;1;0"
                  dur="0.8s"
                  begin="0.2s"
                  repeatCount="1"
                />
                <animate
                  attributeName="stroke-dashoffset"
                  values="1;0"
                  dur="0.5s"
                  begin="0.2s"
                  repeatCount="1"
                />
              </path>
            </svg>
          </div>
        )}

        {/* Nav Items */}
        <ul className="flex gap-x-12 relative z-10">
          {navItems.map((item) => (
            <li
              key={item}
              onClick={() => setActiveTab(item)}
              className={`relative text-base cursor-pointer transition-colors duration-300 ${
                activeTab === item
                  ? "text-[#9C87FE]"
                  : "text-[#EFEEFF] hover:text-[#9C87FE]"
              }`}
            >
              <span className="relative inline-block">
                {item}
                {activeTab === item && (
                  <motion.div
                    layoutId="activeIndicator"
                    className="absolute -bottom-5 left-0 right-0 h-[2px] bg-[#9C87FE]"
                    initial={{ width: "0%", left: "50%" }}
                    animate={{ width: "100%", left: "0%" }}
                    transition={{
                      type: "spring",
                      stiffness: 500,
                      damping: 30,
                    }}
                  />
                )}
              </span>
            </li>
          ))}
        </ul>
      </div>

      {/* CTA Button */}
      <div className="w-[200px] flex justify-end">
        <button className="px-7 py-2 text-white bg-[#9C87FE] rounded-xl text-lg font-medium hover:bg-[#8A7AD6] transition-colors duration-300">
          Get Started
        </button>
      </div>
    </nav>